name: "JFrog OIDC CI Workflow with Full Security Scan"

on: push

permissions:
  id-token: write
  contents: read

env:
  REQS_FILE: langgraph/network-security-agent/setup/requirements.txt
  REQS_FAST_FILE: ci/fast-requirements.txt          # small, fast file (e.g., requests==2.19.1)
  BUILD_NAME: jfrog-security-scan-build
  BUILD_NUMBER: ${{ github.run_id }}
  GENERIC_REPO: ${{ vars.GENERIC_REPO }}           # e.g., my-generic-repo

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}                # e.g. https://<your-domain>.jfrog.io
        with:
          oidc-provider-name: github-oidc-integration

      - name: Ensure jq is available
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Sanity: show PyPI virtual repo details"
        shell: bash
        run: |
          set -euo pipefail
          KEY="${{ vars.PYPI_VIRTUAL_REPO }}"
          echo "Using PYPI_VIRTUAL_REPO=$KEY"
          jf rt curl -s -XGET "/api/repositories/$KEY" | jq '{key,packageType,type,repositories,defaultDeploymentRepo}'
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **PYPI_VIRTUAL_REPO**: \`$KEY\`"
            echo "- **GENERIC_REPO**: \`${GENERIC_REPO}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # --- Source/Secrets/IaC scan (no install) ---
      - name: Scan repository (non-blocking)
        shell: bash
        run: |
          jf scan . --fail=false --format table

      # --- Refresh OIDC so installs start with a fresh token ---
      - name: Re-authenticate JFrog CLI (refresh OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github-oidc-integration

      # --- Configure pip to resolve via JFrog ---
      - name: Configure pip to resolve via JFrog
        shell: bash
        run: |
          SERVER_ID="${SETUP_JFROG_CLI_SERVER_IDS:-setup-jfrog-cli-server}"
          jf pip-config \
            --repo-resolve "${{ vars.PYPI_VIRTUAL_REPO }}" \
            --server-id-resolve "$SERVER_ID"

      # --- Avoid pip probing /simple/pip/ (cuts extra 401s) ---
      - name: Disable pip self version check
        shell: bash
        run: echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> "$GITHUB_ENV"

      # --- FAST install to capture a CVE into build-info (minimal deps) ---
      - name: Install deps via JFrog CLI (fast capture)
        shell: bash
        run: |
          set -euo pipefail
          FAST="$GITHUB_WORKSPACE/$REQS_FAST_FILE"
          pip uninstall -y requests urllib3 PyYAML || true
          if [ -f "$FAST" ]; then
            echo "Using fast requirements file: $FAST"
            cat "$FAST"
            jf pip install -r "$FAST" \
              --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          else
            echo "No fast file found; installing a minimal vulnerable package only."
            jf pip install "requests==2.19.1" --no-deps \
              --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          fi
          echo "Installed packages snapshot:"; pip freeze | egrep 'requests|urllib3|PyYAML' || true

      # --- Clean up local JFrog metadata so it won't be uploaded ---
      - name: Remove JFrog local metadata
        shell: bash
        run: rm -rf .jfrog || true

      # --- Upload repository artifacts (exclude dot-dirs) ---
      - name: Upload repository artifacts
        shell: bash
        run: |
          echo "Uploading source code as artifacts to $GENERIC_REPO..."
          jf rt u "**/*" "$GENERIC_REPO/" \
            --flat=false \
            --exclusions="**/.git/**;**/.github/**;**/.jfrog/**" \
            --build-name="$BUILD_NAME" --build-number="$BUILD_NUMBER"

      # --- Publish & Scan the build (non-blocking) ---
      - name: Publish build info
        shell: bash
        run: jf rt bp "$BUILD_NAME" "$BUILD_NUMBER"

      - name: Scan published build (non-blocking)
        shell: bash
        run: jf bs "$BUILD_NAME" "$BUILD_NUMBER" --fail=false
