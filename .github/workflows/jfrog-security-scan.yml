# A distinct name for this specific workflow
name: "JFrog OIDC CI Workflow with Security Scan"

on: push

permissions:
  id-token: write
  contents: read

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github-oidc-integration

      - name: Run Scan and Publish Build Info
        run: |
          # The JFrog CLI automatically creates build name/number env vars
          BUILD_NAME="jfrog-security-scan-build" # Using a unique build name for clarity
          
          # 1. Upload artifacts to be scanned to your Artifactory repository
          # NOTE: Make sure you have a generic repository named 'my-generic-repo' in Artifactory.
          echo "Uploading source code as an artifact..."
          jf rt u "*" my-generic-repo/ --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER

          # 2. Scan the build for vulnerabilities against your Xray policies
          echo "Scanning build..."
          jf rt bs $BUILD_NAME $BUILD_NUMBER --fail=false

          # 3. Publish the build information (including scan results)
          echo "Publishing build info..."
          jf rt bp $BUILD_NAME $BUILD_NUMBER
