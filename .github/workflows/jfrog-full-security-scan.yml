name: "JFrog OIDC CI Workflow with Full Security Scan"

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# ===== Global defaults (override via repo Variables) =====
env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  REQS_FILE: ${{ vars.REQS_FILE || 'ci/fast-requirements.txt' }}   # ‚Üê fast file by default
  BUILD_NAME: ${{ vars.BUILD_NAME || 'jfrog-security-scan-build' }}
  BUILD_NUMBER: ${{ vars.BUILD_NUMBER || github.run_id }}
  GENERIC_REPO: ${{ vars.GENERIC_REPO || 'my-generic-repo' }}
  PYPI_VIRTUAL_REPO: ${{ vars.PYPI_VIRTUAL_REPO || 'myrepo-pypi' }}
  UPLOAD_PATTERN: ${{ vars.UPLOAD_PATTERN || '**/*' }}
  UPLOAD_EXCLUSIONS: ${{ vars.UPLOAD_EXCLUSIONS || '**/.git/**;**/.github/**;**/.jfrog/**' }}
  FAIL_ON_VULNS: ${{ vars.FAIL_ON_VULNS || 'false' }}   # 'true' to gate the build

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}                     # REQUIRED: e.g. https://<your>.jfrog.io
        with:
          oidc-provider-name: github-oidc-integration

      - name: Ensure jq is available
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Sanity: show effective settings"
        shell: bash
        run: |
          set -euo pipefail
          echo "REQS_FILE=${{ env.REQS_FILE }}"
          echo "PYPI_VIRTUAL_REPO=${{ env.PYPI_VIRTUAL_REPO }}"
          echo "GENERIC_REPO=${{ env.GENERIC_REPO }}"
          echo "UPLOAD_EXCLUSIONS=${{ env.UPLOAD_EXCLUSIONS }}"
          jf rt curl -s -XGET "/api/repositories/${{ env.PYPI_VIRTUAL_REPO }}" | jq '{key,packageType,type,repositories,defaultDeploymentRepo}'
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **PYPI_VIRTUAL_REPO**: \`${{ env.PYPI_VIRTUAL_REPO }}\`"
            echo "- **GENERIC_REPO**: \`${{ env.GENERIC_REPO }}\`"
            echo "- **REQS_FILE**: \`${{ env.REQS_FILE }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # Source/Secrets/IaC scan (non-blocking)
      - name: Scan repository (non-blocking)
        shell: bash
        run: jf scan . --fail=false --format table

      # Refresh OIDC so the install starts with a fresh token
      - name: Re-authenticate JFrog CLI (refresh OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github-oidc-integration

      # Configure pip to resolve via JFrog
      - name: Configure pip to resolve via JFrog
        shell: bash
        run: |
          SERVER_ID="${SETUP_JFROG_CLI_SERVER_IDS:-setup-jfrog-cli-server}"
          jf pip-config \
            --repo-resolve "${{ env.PYPI_VIRTUAL_REPO }}" \
            --server-id-resolve "$SERVER_ID"

      # Avoid pip probing /simple/pip/
      - name: Disable pip self version check
        shell: bash
        run: echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> "$GITHUB_ENV"

      # Install requirements (fast file by default) and capture to build-info
      - name: Install deps via JFrog CLI
        shell: bash
        run: |
          set -euo pipefail
          REQS_ABS="$GITHUB_WORKSPACE/${{ env.REQS_FILE }}"
          echo "Installing from: $REQS_ABS"
          ls -l "$REQS_ABS"
          pip uninstall -y requests urllib3 PyYAML || true
          jf pip install -r "$REQS_ABS" \
            --build-name "${{ env.BUILD_NAME }}" --build-number "${{ env.BUILD_NUMBER }}"
          echo "Installed snapshot:"; pip freeze | head -n 200 || true

      # Clean up local JFrog metadata so it won't be uploaded
      - name: Remove JFrog local metadata
        shell: bash
        run: rm -rf .jfrog || true

      # Upload repository artifacts (exclude dot-dirs)
      - name: Upload repository artifacts
        shell: bash
        run: |
          echo "Uploading artifacts to ${{ env.GENERIC_REPO }}..."
          jf rt u "${{ env.UPLOAD_PATTERN }}" "${{ env.GENERIC_REPO }}/" \
            --flat=false \
            --exclusions="${{ env.UPLOAD_EXCLUSIONS }}" \
            --build-name="${{ env.BUILD_NAME }}" --build-number="${{ env.BUILD_NUMBER }}"

      # Publish & Scan the build
      - name: Publish build info
        shell: bas
