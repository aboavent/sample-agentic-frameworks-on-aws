name: "JFrog OIDC CI Workflow with Full Security Scan"

on: push

permissions:
  id-token: write
  contents: read

env:
  REQS_FILE: langgraph/network-security-agent/setup/requirements.txt
  BUILD_NAME: jfrog-security-scan-build
  BUILD_NUMBER: ${{ github.run_id }}
  GENERIC_REPO: ${{ vars.GENERIC_REPO }}            # e.g., my-generic-repo

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}                  # e.g. https://<your-domain>.jfrog.io
        with:
          oidc-provider-name: github-oidc-integration # must match your JFrog OIDC integration

      - name: Ensure jq is available
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: "Sanity: show PyPI virtual repo details"
        shell: bash
        run: |
          set -euo pipefail
          KEY="${{ vars.PYPI_VIRTUAL_REPO }}"
          echo "Using PYPI_VIRTUAL_REPO=$KEY"
          jf rt curl -s -XGET "/api/repositories/$KEY" | jq '{key,packageType,type,repositories,defaultDeploymentRepo}'
          {
            echo "### JFrog Settings"
            echo "- **JF_URL**: \`${{ vars.JF_URL }}\`"
            echo "- **PYPI_VIRTUAL_REPO**: \`$KEY\`"
            echo "- **GENERIC_REPO**: \`${GENERIC_REPO}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      # --- Source SCA (no install) ---
      - name: Audit manifests for CVEs (non-blocking)
        shell: bash
        run: |
          set -euo pipefail
          REQS_ABS="$GITHUB_WORKSPACE/$REQS_FILE"
          echo "Auditing requirements at: $REQS_ABS"
          ls -l "$REQS_ABS"
          jf audit --pip --requirements-file "$REQS_ABS" --fail=false --format table

      # --- Code/Secrets/IaC (no install) ---
      - name: Scan repository (non-blocking)
        shell: bash
        run: |
          jf scan . --fail=false --format table

      # --- Build Scan: capture dependency graph and attach artifacts ---
      - name: Configure pip to resolve via JFrog
        shell: bash
        run: jf pip-config --repo "${{ vars.PYPI_VIRTUAL_REPO }}"

      - name: Install deps via JFrog CLI (captures deps to build-info)
        shell: bash
        run: |
          set -euo pipefail
          REQS_ABS="$GITHUB_WORKSPACE/$REQS_FILE"
          pip uninstall -y requests urllib3 PyYAML || true
          jf pip install -r "$REQS_ABS" \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          echo "Installed versions:"; pip freeze | egrep 'requests|urllib3|PyYAML' || true

      - name: Upload repository artifacts
        shell: bash
        run: |
          echo "Uploading source code as artifacts to $GENERIC_REPO..."
          jf rt u "**/*" "$GENERIC_REPO/" --flat=false \
            --build-name="$BUILD_NAME" --build-number="$BUILD_NUMBER"

      - name: Publish build info
        shell: bash
        run: jf rt bp "$BUILD_NAME" "$BUILD_NUMBER"

      - name: Scan published build (non-blocking)
        shell: bash
        run: jf bs "$BUILD_NAME" "$BUILD_NUMBER" --fail=false
